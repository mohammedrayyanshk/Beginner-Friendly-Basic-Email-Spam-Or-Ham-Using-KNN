# -*- coding: utf-8 -*-
"""Beginner Friendly Basic Email Spam Or Ham Using KNN.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1HFt_peAG2YeP0BeDsfeoUXqrOd7FHuGJ
"""

import kagglehub
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.preprocessing import LabelEncoder
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix

# Download dataset
path = kagglehub.dataset_download("prishasawhney/email-classification-ham-spam")
print("Dataset downloaded at:", path)

# Load dataset
df = pd.read_csv("/content/sample_data/email_classification.csv")  # Adjust file name if needed

# Encode labels
label_encoder = LabelEncoder()
df['label'] = label_encoder.fit_transform(df['label'])  # Spam = 1, Ham = 0


# Convert text into numerical features
# Use 'email' column instead of 'text'
vectorizer = TfidfVectorizer(stop_words='english', max_features=3000)
X = vectorizer.fit_transform(df['email']).toarray()
y = df['label']

# Split data
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train KNN Model
knn = KNeighborsClassifier(n_neighbors=5)
knn.fit(X_train, y_train)

def predict_email(text):
    text_transformed = vectorizer.transform([text]).toarray()
    prediction = knn.predict(text_transformed)
    return "Spam" if prediction[0] == 1 else "Ham"

# Menu-driven system
while True:
    print("\n--- Email Spam Detection System ---")
    print("1. View Dataset Sample")
    print("2. Train Model & Check Accuracy")
    print("3. Test a New Email")
    print("4. Exit")

    choice = input("Enter your choice: ")

    if choice == '1':
        print("\nSample Data:")
        print(df.head())

    elif choice == '2':
        y_pred = knn.predict(X_test)
        accuracy = accuracy_score(y_test, y_pred)
        print("\nModel Accuracy:", accuracy)
        print("Classification Report:\n", classification_report(y_test, y_pred))

        conf_matrix = confusion_matrix(y_test, y_pred)
        sns.heatmap(conf_matrix, annot=True, fmt="d", cmap="Blues", xticklabels=['Ham', 'Spam'], yticklabels=['Ham', 'Spam'])
        plt.xlabel("Predicted")
        plt.ylabel("Actual")
        plt.title("Confusion Matrix")
        plt.show()

    elif choice == '3':
        new_email = input("\nEnter the email text: ")
        print("Prediction:", predict_email(new_email))

    elif choice == '4':
        print("Exiting...\n")
        break

    else:
        print("Invalid choice. Please try again.")